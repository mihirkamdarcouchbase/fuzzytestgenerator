import random
import string
from CommonUtil import util, constants


class SchemaGenerator:
    # {
    #   num_docs:
    #   doc_key_length:
    #   total_doc_size:
    #   fields: {[
    #       field_name:
    #       field_data_type:
    #       field_value_length: ]
    #    }
    # }

    schema_map = None

    def __init__(self):
        self.log = util.initialize_logger("schema-generator")
        self.generate_schema()

    def get_schema(self):
        return self.schema_map

    def generate_schema(self):
        # Assume MIN_NUM_FIELDS = 3, MAX_NUM_FIELDS=10
        self.log.info("Generating schema")
        MIN_NUM_FIELDS = 2
        MAX_NUM_FIELDS = 3
        num_fields = random.randint(MIN_NUM_FIELDS, MAX_NUM_FIELDS)

        self.log.info("Number of fields : {0}".format(num_fields))

        field_info_list = []
        max_doc_size = 0
        doc_key_length = random.randint(0, 255)
        for i in range(num_fields):
            # Generate Field Key Length between 3 and 100
            self.log.info("Field : {0}".format(i))
            field_key_length = random.randint(3, 100)

            field_info = {}
            field_info["field_name"] = ''.join(random.choice(string.ascii_lowercase) for x in range(field_key_length))
            field_info["field_data_type"] = random.choice(
                ["string", "float", "alphanumeric", "boolean", "integer", "letters", "spl_chars", "null", "missing"])
            field_info["field_value_length"] = random.randint(1, 20)
            if field_info["field_data_type"] != "missing":
                field_info["can_aggregate"] = random.choice([True, False])
                if field_info["can_aggregate"]:
                    field_info["predefined_values"] = self.get_predefined_values(field_info)
            else:
                field_info["can_aggregate"] = False

            self.log.info("Field info : {0}".format(field_info))

            field_info_list.append(field_info)

            max_doc_size += field_key_length + field_info["field_value_length"]

        self.schema_map = {}
        self.schema_map["fields"] = field_info_list
        self.schema_map["max_doc_size"] = max_doc_size
        self.schema_map["doc_key_length"] = int(doc_key_length)
        self.schema_map["num_docs"] = int(constants.MAX_BATCH_SIZE / (max_doc_size * constants.KV_OPS_PROCESSES))

        self.schema_map = {'fields': [{'field_name': 'cqf', 'field_data_type': 'integer', 'field_value_length': 8, 'can_aggregate': True, 'predefined_values': [46137802, 12913571, 25579244, 72672361, 38165997, 18377313, 11732169, 99028647, 54309253, 26238969, 27096849, 68422714, 78037031, 12069272, 78524827, 24778956, 26780537, 37887739, 16831759, 49012162, 33694520, 38688569, 87454930, 49417706, 85398371, 43025689, 74509380, 42872751, 97128526, 56292547, 89412634, 55918273, 49967411, 12814047, 18907055, 75880998, 58394027, 70233528, 83317310, 39330627, 70139219, 57182834, 53867224, 13914408, 16956215, 57984339, 71326767, 79332666, 97401148, 44001006, 13489010, 86861274, 93671590, 81798497, 74035206, 48867219, 22507624, 53866801, 10400247, 84223318, 12390223, 83040459, 18515017, 43595594, 91257848, 19501190, 38979137, 21901868, 78402457, 21541792, 84442812, 85986745, 73271812, 30811693, 22611329, 31438122, 27555264, 61625619, 94867339, 42541951, 54925183, 48528866, 71503237, 87036992, 68874858, 60972018, 39928876, 38461847, 16565307, 56344037, 37095234, 27921899, 98261559, 85372601, 15390866, 46788507, 25435595, 91647529, 61484867, 79369481, 33578915, 98148464, 61075140, 19449831, 94458821, 46380920, 33404378, 12894847, 62549229, 17511531, 25771734, 21516009, 79347041, 14920013, 71851912, 99634415, 86531983, 42187282, 33209650, 59184897, 74740110, 99572229, 79750672, 18059618, 37568864, 38712405, 74927215, 99508657, 15394837, 42882624, 98465258, 59179646, 69206965, 75994820, 21726160, 61300707, 91335368, 22522428, 91943042, 44571383, 55464697, 52088642, 32081563, 72518091, 80079053, 36902590, 94796200, 15172080, 83545613, 93376900, 15272358, 14086644, 37032620, 58693060, 77279838, 61042013, 67425995, 39387284, 65422984, 74761939, 20814176, 41938393, 46940904, 83218801, 98085939, 81149576, 79803649, 98309875, 47185412, 46566894, 74087107, 67978049, 23912173, 39226617, 47956128, 96285140, 88911815, 75617741, 78825975, 72919690, 68441420, 99167875, 74386453, 99561190, 76303498, 67615990, 46184146, 70682860, 15377120, 11093482, 75737552, 74583308, 17489005, 34074727, 85161788, 60481266, 82575155, 17199321, 67068312, 77505666, 90992397, 70172817, 11141534, 22966905, 97656569, 85129127, 28040635, 91292148, 96067109, 77307467, 32441810, 29630879, 43849550, 26216336, 67715673, 57562089, 99619196, 28103164, 28321777, 58613103, 46265499, 53421382, 60397145, 24938854, 34003133, 94368957, 88256868, 91492514, 34122194, 24082711, 11258135, 58965257, 34181173, 47134693, 69329980, 40345870, 24493055, 63617994, 65719775, 92128893, 94611289, 45382616, 17931070, 25518855, 46237658, 31849916, 70299362, 45674786, 53569744, 69066642, 18164638, 54538240, 91685662, 29023408, 39376739, 26105284, 36649095, 89634274, 84480297, 71641850, 49769962, 96550791, 41086590, 81597054, 77547835, 46840840, 70594687, 67883229, 30957449, 46767995, 52378050, 32193051, 93379399, 40603186, 17229520, 30650618, 80146452, 63575874, 57696813, 54295454, 77013118, 18766121, 34741620, 19474009, 31728850, 81765355, 93131443, 44832660, 33125864, 34548919, 47564578, 13265989, 40477089, 48138400, 36639543, 81248393, 47385067, 43632994, 48032606, 86125135, 61961540, 42714625, 68319123, 80142291, 67471808, 56974793, 27582851, 21244789, 85283357, 46505108, 91270593, 20583157, 55257223, 58084640, 90739779, 39206188, 11955999, 35459609, 46752823, 77766270, 42793369, 75565906, 80655043, 10713085, 38436499, 24169815, 67200162, 69352001, 97826601, 89203632, 62127310, 79930271, 53112470, 60344533, 55134718, 41313516, 93506373, 34215237, 42588696, 17351518, 26651433, 19936109, 29578663, 39864621, 34272918, 53903400, 44544166, 77841120, 50540504, 77480861, 36476755, 43890356, 36908010, 31819748, 54816785, 98194606, 74895186, 19360113, 39074594, 86093751, 23723722, 51723288, 74048897, 77268392, 83684743, 69724015, 42292688, 64527188, 67456049, 22702571, 51396949, 51643434, 12250963, 47052744, 60335020, 19959368, 14253378, 86444660, 36828960, 31727822, 68591222, 48907693, 41272814, 31781879, 20168750, 85776886, 73192691, 55612927, 87097613, 24853654, 63332975, 73775162, 51633294, 70346345, 79310677, 34333403, 39460111, 31765118, 71597894, 99902027, 82898562, 82066182, 40824042, 72908096, 61141726, 92252217, 44445455, 33863607, 98817638, 30159465, 71597004, 34260185, 77128554, 22761605, 30754268, 73231389, 78581064, 37633081, 47852222, 42003443, 75385409, 24585015, 47511566, 65394746, 22318153, 75369681, 76927748, 49564351, 29500410, 83370386, 66537422, 67719649, 45454343, 43464206, 26219603, 27257089, 14455206, 65944760, 13310194, 57810591, 58285756, 66316343, 74931718, 73689276, 42328447, 24242091, 29525078, 53541442, 24445506, 98526653, 64682910, 54997039, 90721719, 25839852, 78191322, 70046870, 86257510, 23247883, 75336384, 60001321, 50290779, 36338879, 93210234, 60654293, 11822357, 60171940, 88641005, 78273563, 50383055, 13101777, 22482155, 59934615, 40698472, 24968638, 18213412, 99328898, 62921777, 70732508, 48272701, 50504464, 13650085, 56499063, 55564936, 20924838, 13444900, 31141849, 54252853, 18391752, 45059399, 37381117, 46936359, 35444758, 74140277, 20560888, 74239608, 95581455, 18984892, 10342942, 39484794, 46149311, 70004148, 47440346, 56962784, 11274364, 62131208, 82581446, 56909746, 44554594, 79907719, 45558392, 74213341, 47435681, 55065598, 25558191, 48187273, 17920443, 36296520, 28985653, 79394408, 25068000, 21765625, 81267775, 26313641, 75682554, 80077884, 74827442, 49336458, 88822690, 85129560, 14098089, 56188998, 18483652, 90218099, 61956649, 32746463, 62204958, 28411520, 42139637, 46594088, 19418937, 49308748, 78281988, 23215729, 13744737, 89680370, 10194139, 47843887, 97199228, 95548419, 39727555, 66963286, 34815457, 43838136, 13709524, 24869219, 98972633, 81675373, 55368385, 90487927, 25937331, 42744966, 79712584, 46664340, 20023870, 14645271, 17765730, 41488751, 62488931, 40859426, 31164471, 69728815, 91344936, 96969897, 84994888, 70816740, 82271521, 71828525, 12767020, 66715135, 26079288, 93659893, 49760361, 40392147, 25266974, 43528220, 86202614, 37564589, 73424083, 16601139, 54318332, 61339223, 60837991, 35899485, 76843512, 39219457, 51056425, 57161446, 73559349, 72740037, 50112761, 93212628, 82307045, 73444937, 47727440, 18241105, 73167727, 96264151, 79078208, 18732731, 64515025, 47134692, 50981647, 48327829, 73948045, 56565667, 94895906, 30523214, 71032788, 55513361, 92776191, 10616049, 71396819, 34666857, 90630155, 91561546, 71368440, 56312650, 29907669, 74820798, 47991894, 64371871, 12705181, 48419826, 62198865, 10938528, 34580271, 28101068, 61171803, 73135979, 48909884, 75935013, 35720166, 32850771, 82756126, 57466488, 58309202, 74718378, 54810201, 19495079, 53375927, 49472323, 44735417, 18225494, 86117732, 92063409, 84718775, 28266113, 67601015, 21374343, 50438998, 41350901, 29034568, 41602462, 47995692, 66684722, 65545196, 37394561, 36330984, 88371865, 12605179, 36457916, 92954230, 98473192, 54288021, 84939067, 52038682, 42182684, 20189426, 16387010, 41717239, 73953211, 12131455, 38272615, 41170938, 83157886, 68670895, 37605532, 33020939, 96821535, 91777266, 21660370, 94469218, 23487269, 46625612, 18770001, 45783356, 41141808, 64978921, 68075539, 11059213, 90487574, 40958818, 36006403, 23059409, 96016269, 22588280, 23258828, 15271113, 76500466, 60694229, 19657797, 57102889, 62324530, 85468592, 91008178, 18775266, 66972413, 68081551, 34998983, 44290777, 19361238, 95170187, 76796452, 12233657, 19061830, 22774058, 34090465, 53461294, 86561553, 34138606, 46189676, 67171361, 94415499, 29242388, 87309377, 11002475, 71346226, 27476005, 85721202, 25984859, 66653922, 18767685, 93931264, 77898018, 70026479, 61774319, 80642490, 83809478, 98441878, 31622633, 30467313, 97313207, 99044237, 56285639, 54900633, 11853051, 50972005, 44007728, 14976332, 85968790, 95238760, 19712172, 73700726, 30046719, 75785461, 13638608, 12263163, 22828441, 38432517, 27248924, 23839096, 71174058, 64315524, 27702494, 63927553, 26430402, 24323783, 42073609, 52453246, 98382175, 49529827, 69584799, 27382016, 10677648, 72569726, 91878390, 32642450, 73593317, 18146013, 16689910, 32390469, 39987058, 72196970, 20940522, 49878070, 68566085, 48547453, 83939572, 43984447, 97638203, 47039180, 22618736, 81468926, 82203131, 75995860, 63186352, 11510553, 72889932, 99773551, 32852486, 30471952, 76399930, 69913389, 51069767, 72020068, 90106048, 58530347, 34120774, 84279263, 43305401, 55294514, 28865903, 69856590, 45190725, 32339405, 22173148, 75804456, 35832960, 18469222, 98861487, 50138981, 65751787, 20342008, 40787605, 75541230, 64788985, 95221848, 52011170, 57650077, 32817620, 17898384, 15617041, 78775105, 22233423, 93759704, 96886833, 84394393, 37859490, 35645489, 37978015, 62885079, 26983615, 50985690, 73845737, 38091057, 82020193, 90169005, 22772486, 35959586, 10434715, 37878655, 80184459, 67511904, 34295656, 60067302, 54296481, 53357010, 37461916, 50032740, 52048393, 89998691, 91388202, 72697759, 76936981, 95280451, 65700680, 12607522, 17793899, 37403949, 31928625, 78316901, 87478828, 16297129, 73510869, 41618613, 85921997, 91191079, 13885583, 40989750, 87365469, 64980043, 10526679, 88205518, 50754735, 93097349, 98099612, 21352700, 42978091, 96967635, 59504385, 25406136, 20951763, 38436964, 30766890, 72826309, 94942603, 28386566, 30590952, 90342961, 88030880, 68242283, 43906722, 23653295, 72321644, 51852776, 97277621, 62155996, 41427398, 61185757, 71483523, 18581959, 73116483, 15971350, 98098190, 65789626, 43259756, 86090989, 26193945, 69785702, 92910450, 91488662, 81135925, 89289766, 96903989, 30749127, 84453539, 30086636, 17271007, 55386664, 83260163, 54404179, 26089686, 84985722, 93720824, 76649534, 56641519, 11623028, 89234446, 43084735, 42668472, 12953998, 57977293, 75032941, 25773406, 60212770, 83391108, 40365379, 85446021, 57467506, 12531200, 69322109, 72856739, 31000053, 46283353, 40457146, 94296678, 76125171, 83912601, 62379582, 94738429, 20613333, 71924215, 22555845, 53564896, 41396380, 66355744, 17202469, 82931791, 87330092, 14557256, 29387691, 98214936, 32210582, 17780501, 15736514, 62667696, 24607950, 48729424, 89546416, 44764771, 28151619, 83657616, 36959727, 74122657, 26982527, 54643523, 45532725, 77979079, 60426762, 78232213]}, {'field_name': 'xve', 'field_data_type': 'spl_chars', 'field_value_length': 5, 'can_aggregate': False}, {'field_name': 'rsx', 'field_data_type': 'letters', 'field_value_length': 7, 'can_aggregate': False}], 'max_doc_size': 50, 'doc_key_length': 20, 'num_docs': 100000}

        self.schema_map["fields"].append({'field_name': 'mutated', 'field_data_type': 'integer', 'field_value_length': 1, 'can_aggregate': True, 'predefined_values': [1]})
        self.schema_map["fields"].append({'field_name': 'type', 'field_data_type': 'letters', 'field_value_length': 6, 'can_aggregate': True, 'predefined_values': ["fuzzy1", "fuzzy2"]})


        self.log.info("Schema map : {0}".format(self.schema_map))
        self.log.info("Max doc size : {0}".format(max_doc_size))

    def get_predefined_values(self, field):
        num_predefined_values = random.choice(range(100))
        field_data_type = field["field_data_type"]
        field_values = []
        for i in range(num_predefined_values):
            if field_data_type.lower() == "boolean":
                field_value = random.choice([True, False])
            elif field_data_type.lower() == "alphanumeric":
                field_value = ''.join(
                    random.choice(string.ascii_letters + string.digits) for _ in range(field["field_value_length"]))
            elif field_data_type.lower() == "integer":
                range_start = 10 ** (field["field_value_length"] - 1)
                range_end = (10 ** field["field_value_length"]) - 1
                field_value = random.randint(range_start, range_end)
            elif field_data_type.lower() == "float":
                precision = random.randint(1, 8)
                range_start = 10 ** (field["field_value_length"] - 1)
                range_end = (10 ** field["field_value_length"]) - 1
                field_value = round(random.uniform(range_start, range_end), precision)
            elif field_data_type.lower() == "letters":
                field_value = ''.join(random.choice(string.ascii_letters) for _ in range(field["field_value_length"]))
            elif field_data_type.lower() == "string":
                field_value = ''.join(random.choice(string.printable + '!@#$%^&*()_') for _ in
                                      range(field["field_value_length"]))
            elif field_data_type.lower() == "spl_chars":
                field_value = ''.join(random.choice(string.whitespace + string.punctuation + '!@#$%^&*()_') for _ in
                                      range(field["field_value_length"]))
            # elif field_data_type.lower() == "date":
            elif field_data_type.lower() == "null":
                field_value = None
            elif field_data_type.lower() == "missing":
                field_value = ''.join(random.choice(string.ascii_letters) for _ in range(field["field_value_length"]))
                skip_field = random.choice([True, False])
            else:
                self.log.info("unknown data type")

            field_values.append(field_value)

        return field_values




